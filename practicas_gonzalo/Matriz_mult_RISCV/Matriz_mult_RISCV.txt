# Multiplicaci√≥n de matrices 3x3 en RISC-V

.data
# Matriz A (3x3)
A: .word 3, 7, 2
   .word 8, 1, 5
   .word 4, 9, 6

# Matriz B (3x3)
B: .word 5, 8, 3
   .word 2, 7, 9
   .word 1, 4, 6

# Matriz C (resultado 3x3)
C: .space 36     # 9 elementos * 4 bytes

.text
.globl main

main:
    # Guardar registros usados
    addi sp, sp, -16
    sw ra, 12(sp)
    sw s0, 8(sp)
    sw s1, 4(sp)
    sw s2, 0(sp)

    li s0, 0               # i = 0

i_loop:
    li s1, 0               # j = 0

j_loop:
    li t0, 0               # suma = 0
    li s2, 0               # k = 0

k_loop:
    # t1 = A[i][k]
    la t2, A
    mul t3, s0, 3
    add t3, t3, s2
    slli t3, t3, 2
    add t4, t2, t3
    lw t1, 0(t4)

    # t5 = B[k][j]
    la t2, B
    mul t3, s2, 3
    add t3, t3, s1
    slli t3, t3, 2
    add t4, t2, t3
    lw t5, 0(t4)

    # suma += A[i][k] * B[k][j]
    mul t6, t1, t5
    add t0, t0, t6

    addi s2, s2, 1
    li t1, 3
    blt s2, t1, k_loop

    # Guardar suma en C[i][j]
    la t1, C
    mul t2, s0, 3
    add t2, t2, s1
    slli t2, t2, 2
    add t3, t1, t2
    sw t0, 0(t3)

    addi s1, s1, 1
    li t4, 3
    blt s1, t4, j_loop

    addi s0, s0, 1
    li t4, 3
    blt s0, t4, i_loop

    # Restaurar registros y terminar
    lw s2, 0(sp)
    lw s1, 4(sp)
    lw s0, 8(sp)
    lw ra, 12(sp)
    addi sp, sp, 16
    li a7, 10
    ecall